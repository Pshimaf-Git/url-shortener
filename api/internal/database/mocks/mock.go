// Code generated by MockGen. DO NOT EDIT.
// Source: D:\url-shortener\api\internal\database\database.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockURLProvider is a mock of URLProvider interface.
type MockURLProvider struct {
	ctrl     *gomock.Controller
	recorder *MockURLProviderMockRecorder
}

// MockURLProviderMockRecorder is the mock recorder for MockURLProvider.
type MockURLProviderMockRecorder struct {
	mock *MockURLProvider
}

// NewMockURLProvider creates a new mock instance.
func NewMockURLProvider(ctrl *gomock.Controller) *MockURLProvider {
	mock := &MockURLProvider{ctrl: ctrl}
	mock.recorder = &MockURLProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLProvider) EXPECT() *MockURLProviderMockRecorder {
	return m.recorder
}

// GetURl mocks base method.
func (m *MockURLProvider) GetURl(ctx context.Context, alias string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURl", ctx, alias)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURl indicates an expected call of GetURl.
func (mr *MockURLProviderMockRecorder) GetURl(ctx, alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURl", reflect.TypeOf((*MockURLProvider)(nil).GetURl), ctx, alias)
}

// MockURLDeleter is a mock of URLDeleter interface.
type MockURLDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockURLDeleterMockRecorder
}

// MockURLDeleterMockRecorder is the mock recorder for MockURLDeleter.
type MockURLDeleterMockRecorder struct {
	mock *MockURLDeleter
}

// NewMockURLDeleter creates a new mock instance.
func NewMockURLDeleter(ctrl *gomock.Controller) *MockURLDeleter {
	mock := &MockURLDeleter{ctrl: ctrl}
	mock.recorder = &MockURLDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLDeleter) EXPECT() *MockURLDeleterMockRecorder {
	return m.recorder
}

// DeleteURL mocks base method.
func (m *MockURLDeleter) DeleteURL(ctx context.Context, alias string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteURL", ctx, alias)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteURL indicates an expected call of DeleteURL.
func (mr *MockURLDeleterMockRecorder) DeleteURL(ctx, alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURL", reflect.TypeOf((*MockURLDeleter)(nil).DeleteURL), ctx, alias)
}

// MockURLSaver is a mock of URLSaver interface.
type MockURLSaver struct {
	ctrl     *gomock.Controller
	recorder *MockURLSaverMockRecorder
}

// MockURLSaverMockRecorder is the mock recorder for MockURLSaver.
type MockURLSaverMockRecorder struct {
	mock *MockURLSaver
}

// NewMockURLSaver creates a new mock instance.
func NewMockURLSaver(ctrl *gomock.Controller) *MockURLSaver {
	mock := &MockURLSaver{ctrl: ctrl}
	mock.recorder = &MockURLSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLSaver) EXPECT() *MockURLSaverMockRecorder {
	return m.recorder
}

// SaveURL mocks base method.
func (m *MockURLSaver) SaveURL(ctx context.Context, userURl, alias string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURL", ctx, userURl, alias)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveURL indicates an expected call of SaveURL.
func (mr *MockURLSaverMockRecorder) SaveURL(ctx, userURl, alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURL", reflect.TypeOf((*MockURLSaver)(nil).SaveURL), ctx, userURl, alias)
}

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDatabase) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close))
}

// DeleteURL mocks base method.
func (m *MockDatabase) DeleteURL(ctx context.Context, alias string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteURL", ctx, alias)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteURL indicates an expected call of DeleteURL.
func (mr *MockDatabaseMockRecorder) DeleteURL(ctx, alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURL", reflect.TypeOf((*MockDatabase)(nil).DeleteURL), ctx, alias)
}

// GetURl mocks base method.
func (m *MockDatabase) GetURl(ctx context.Context, alias string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURl", ctx, alias)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURl indicates an expected call of GetURl.
func (mr *MockDatabaseMockRecorder) GetURl(ctx, alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURl", reflect.TypeOf((*MockDatabase)(nil).GetURl), ctx, alias)
}

// SaveURL mocks base method.
func (m *MockDatabase) SaveURL(ctx context.Context, userURl, alias string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURL", ctx, userURl, alias)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveURL indicates an expected call of SaveURL.
func (mr *MockDatabaseMockRecorder) SaveURL(ctx, userURl, alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURL", reflect.TypeOf((*MockDatabase)(nil).SaveURL), ctx, userURl, alias)
}
